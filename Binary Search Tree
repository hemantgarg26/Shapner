//Implementing Binary Search Tree
class Node{
    constructor(data, left=null, right=null){
        this.data = data;
        this.leftChild = left;
        this.rightChild = right;
    }
}


class BST{
    constructor(){
        this.root = null;
    }

    insertDataBST(data){
        const node = this.root;
        if(node == null){
            this.root = new Node(data);
            return;
        }
        else{
            // Creating function for searching the tree
            const searchTree = function(node){
                if(data < node.data){
                    if(node.left === null){
                        node.left = new Node(data);
                        return;
                    }else if(node.left != null){
                        return searchTree(node.left);
                    }
                }
                else if(data > node.data){
                    if(node.right === null){
                        node.right = new Node(data);
                        return;
                    }else if(node.right != null){
                        return searchTree(node.right);
                    }
                }else {
                    return null;
                }

            }
        } return searchTree(node);
    }

    findingNode(data){
        let current = this.root;
        while(current){
            if(data === current.data){
                return true;
            }

            if(data<current.data){
                current = current.left;
            } else {
                current = current.right;
            }
        }
        return false;
    }
}
